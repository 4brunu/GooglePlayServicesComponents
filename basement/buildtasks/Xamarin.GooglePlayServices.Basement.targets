<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- 
    * 
    * Xamarin GooglePlayServices Basement MSBuild Tasks
    * 
  -->

  <!-- the pre-build checks -->
  <Target Name="ProcessGoogleServicesJsonChecks" Condition=" '@(GoogleServicesJson)' == '' " BeforeTargets="BeforeBuild">
    <Message Text="No GoogleServicesJson file specified." />
  </Target>


  <!-- make the 'GoogleServicesJson' build action available in the Visual Studio dropdown -->
  <ItemGroup>
    <AvailableItemName Include="GoogleServicesJson" />   
  </ItemGroup>

  <PropertyGroup>
    <ProcessGoogleServicesJsonTaskFilename Condition=" '$(ProcessGoogleServicesJsonTaskFilename)' == '' ">$(MSBuildThisFileDirectory)Xamarin.GooglePlayServices.Tasks.dll</ProcessGoogleServicesJsonTaskFilename>
  </PropertyGroup>

  <!-- set some defaults -->
  <PropertyGroup>
    <ProcessGoogleServicesJsonDependsOn>
       $(ProcessGoogleServicesJsonDependsOn);
    </ProcessGoogleServicesJsonDependsOn>
    <ProcessGoogleServicesJsonBeforeTargets>
      _GenerateAndroidResourceDir;$(ProcessGoogleServicesJsonBeforeTargets);
    </ProcessGoogleServicesJsonBeforeTargets>
    <ProcessGoogleServicesJsonAfterTargets>
      $(ProcessGoogleServicesJsonAfterTargets);
    </ProcessGoogleServicesJsonAfterTargets>
  </PropertyGroup>

  <PropertyGroup>
    <CleanDependsOn>
      $(CleanDependsOn);
      _CleanProcessGoogleServicesJson;
    </CleanDependsOn>
  </PropertyGroup>

  <!-- include the task assembly -->
  <UsingTask 
      AssemblyFile="Xamarin.GooglePlayServices.Tasks.dll" 
      TaskName="Xamarin.GooglePlayServices.Tasks.ProcessGoogleServicesJson" />

  <!-- the build tasks -->
  <Target
    Name="ProcessGoogleServicesJson" 
    Condition=" '@(GoogleServicesJson)' != '' AND '$(AndroidApplication)' == 'True'"
    BeforeTargets="$(ProcessGoogleServicesJsonBeforeTargets)"
    AfterTargets="$(ProcessGoogleServicesJsonAfterTargets)"
    Inputs="@(GoogleServicesJson);@(AndroidResource);$(MSBuildProjectFullPath);$(MSBuildAllProjects);"
    Outputs="$(IntermediateOutputPath)ProcessGoogleServicesJson.stamp">

    <ProcessGoogleServicesJson
        GoogleServicesJsons="@(GoogleServicesJson)"
        IntermediateOutputPath="$(IntermediateOutputPath)"
        MonoAndroidResDirIntermediate="$(MonoAndroidResDirIntermediate)"
        AndroidPackageName="$(_AndroidPackage)">
            <!-- Source of generated resource file, to be copied into obj/Debug/res/   eg: Resources\values\goog_svcs_json.xml -->
            <Output ItemName="AndroidResource" TaskParameter="GoogleServicesGeneratedResourcesSource" />
            <!-- Destination of resource file, where it should go inside obj/Debug/res/  eg: obj\Debug\res\values\goog_svcs_json.xml - should use full path -->
            <Output ItemName="_AndroidResourceDest" TaskParameter="GoogleServicesGeneratedResourcesDest" />
    </ProcessGoogleServicesJson>

    <ItemGroup>
        <FileWrites Include="$(IntermediateOutputPath)ProcessGoogleServicesJson.stamp" />
    </ItemGroup>
  </Target>

  <Target Name="_CleanProcessGoogleServicesJson">
    <RemoveDir Directories="$(IntermediateOutputPath)procgoogsvcsjson" Condition="Exists ('$(IntermediateOutputPath)procgoogsvcsjson' )" />
    <Delete Files="$(IntermediateOutputPath)ProcessGoogleServicesJson.stamp" Condition="Exists ('$(IntermediateOutputPath)ProcessGoogleServicesJson.stamp' )" />
  </Target>

  <!-- 
  IncrementalClean in msbuild will try and remove files from obj/$(Configuration)/res/* that we added if they aren't in the `_CleanCurrentFileWrites` item group
  This target just ensures the files we might generate actually end up in the that item group so they aren't removed on build
   -->
  <Target Name="_RegisterGoogleServicesJsonResourcesWithFileWrites" BeforeTargets="IncrementalClean;_GenerateAndroidResourceDir">  
    <CreateItem Include="$(IntermediateOutputPath)res\values\goog_svcs_json.xml;$(IntermediateOutputPath)res\xml\global_tracker.xml">  
      <Output TaskParameter="Include" ItemName="_FilesToRegister" />  
    </CreateItem>  
    <CreateItem Include="$([System.IO.Path]::GetFullPath('%(_FilesToRegister.Identity)'))"
        Condition="Exists('%(_FilesToRegister.Identity)')">  
      <Output TaskParameter="Include" ItemName="_CleanCurrentFileWrites" />  
    </CreateItem>
  </Target>


  <!-- If set to False, here, or elsewhere, we won't try to add this optional library to proguard invocations -->
  <PropertyGroup Condition=" $(IncludeOrgApacheHttpLegacyJarInProguard) == '' ">
    <IncludeOrgApacheHttpLegacyJarInProguard>True</IncludeOrgApacheHttpLegacyJarInProguard>
  </PropertyGroup>

  <!-- 
  Play Services still references org.apache.http.legacy.jar, however this lib is optional and not included in the proguard
  call by default.  This target will add this external library, if it exists in the ANDROID_HOME/platform/android-ZZ/optional/ folder
  For the given api level (ZZ) unless the property is explicitly set to override this behaviour
  -->
  <Target Name="AddOrgApacheHttpLegacyJarInProguardExternalJavaLibs"
      DependsOnTargets="_ResolveMonoAndroidSdks;_ValidateAndroidPackageProperties"
      AfterTargets="_ResolveMonoAndroidSdks;_ValidateAndroidPackageProperties"
      BeforeTargets="Proguard"
      Condition="$(IncludeOrgApacheHttpLegacyJarInProguard) == 'True' and Exists ('$(AndroidSdkDirectory)/platforms/android-$(_AndroidTargetSdkVersion)/optional/org.apache.http.legacy.jar')">
    <ItemGroup>
      <AndroidExternalJavaLibrary Include="$(AndroidSdkDirectory)/platforms/android-$(_AndroidTargetSdkVersion)/optional/org.apache.http.legacy.jar" />
    </ItemGroup>
  </Target>
</Project>